{"version":3,"file":"component---src-pages-templates-services-tsx-c12bb437a776a55478f4.js","mappings":"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","sources":["webpack://code-cave/./src/components/services/servicePreview.tsx","webpack://code-cave/./src/components/services/servicesCarouselButtons.tsx","webpack://code-cave/./src/components/services/servicesCarousel.tsx","webpack://code-cave/./src/pagesTemplates/services.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { IServicePreview } from \"../../types/services.type\";\n\nconst ServicePreview = ({\n  service,\n  className,\n}: {\n  service: IServicePreview;\n  className?: string;\n}) => {\n  const {\n    html,\n    frontmatter: {\n      title,\n      keywords,\n      image: { publicURL: imageURL },\n    },\n  } = service;\n\n  return (\n    <div\n      className={`service-preview origin-[5%_50%] break-inside-avoid flex flex-col gap-5 p-8 text-secondary-100 cursor-pointer ${className}`}\n      itemScope\n      itemType=\"https://schema.org/Service\"\n    >\n      <div className=\"flex items-center gap-5\">\n        <img\n          src={imageURL}\n          alt={`${title} logo`}\n          className=\"invert h-10 w-10\"\n        />\n        <h2 className=\"font-bold text-2xl\" itemProp=\"serviceType\">\n          {title}\n        </h2>\n      </div>\n      <div\n        className={`text-base text-secondary-70`}\n        dangerouslySetInnerHTML={{ __html: html }}\n        itemProp=\"description\"\n      />\n      {keywords ? (\n        <div className=\"flex gap-2 flex-wrap w-full\">\n          {keywords.map((hashtag) => (\n            <p\n              key={hashtag}\n              className=\"h-8 flex items-center whitespace-nowrap px-4 bg-main-70 text-secondary-70 rounded-lg\"\n            >\n              {hashtag}\n            </p>\n          ))}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default ServicePreview;\n","import React, {\n  ComponentPropsWithRef,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { EmblaCarouselType } from \"embla-carousel\";\nimport { IServicePreview } from \"../../types/services.type\";\n\ntype UseDotButtonType = {\n  selectedIndex: number;\n  onServiceButtonClick: (index: number) => void;\n};\n\nexport const useServicesButtons = (\n  emblaApi: EmblaCarouselType | undefined,\n  onButtonClick?: (emblaApi: EmblaCarouselType) => void\n): UseDotButtonType => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  const onServiceButtonClick = useCallback(\n    (index: number) => {\n      if (!emblaApi) return;\n      emblaApi.scrollTo(index);\n      if (onButtonClick) onButtonClick(emblaApi);\n    },\n    [emblaApi, onButtonClick]\n  );\n\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\n    setSelectedIndex(emblaApi.selectedScrollSnap());\n  }, []);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    onSelect(emblaApi);\n\n    emblaApi.on(\"reInit\", onSelect).on(\"select\", onSelect);\n  }, [emblaApi, onSelect]);\n\n  return {\n    selectedIndex,\n    onServiceButtonClick,\n  };\n};\n\ninterface IServiceCarouselButtonProps extends ComponentPropsWithRef<\"button\"> {\n  service: IServicePreview;\n}\n\nexport const ServiceCarouselButton = ({\n  service,\n  className,\n  ...attr\n}: IServiceCarouselButtonProps) => {\n  const {\n    frontmatter: {\n      title,\n      image: { publicURL: imageURL },\n    },\n  } = service;\n\n  return (\n    <button\n      className={`flex gap-5 min-h-10 items-center ${className}`}\n      type=\"button\"\n      {...attr}\n    >\n      <img src={imageURL} alt={`${title} logo`} className=\"invert h-7 w-7\" />\n      <h2\n        className=\"hidden lg:block font-semibold text-lg text-secondary-100 text-start\"\n        itemProp=\"serviceType\"\n      >\n        {title}\n      </h2>\n    </button>\n  );\n};\n","import React, { useCallback, useEffect, useRef } from \"react\";\nimport { EmblaCarouselType, EmblaEventType } from \"embla-carousel\";\nimport useEmblaCarousel from \"embla-carousel-react\";\n\nimport { IServicePreview } from \"../../types/services.type\";\n\nimport ServicePreview from \"./servicePreview\";\nimport {\n  ServiceCarouselButton,\n  useServicesButtons,\n} from \"./servicesCarouselButtons\";\n\nconst TWEEN_FACTOR_BASE = 0.2;\nconst numberWithinRange = (number: number, min: number, max: number): number =>\n  Math.min(Math.max(number, min), max);\n\nconst ServicesCarousel = ({ services }: { services: IServicePreview[] }) => {\n  const [emblaRef, emblaApi] = useEmblaCarousel({\n    axis: \"y\",\n    loop: true,\n    align: \"center\",\n  });\n\n  const tweenFactor = useRef(0);\n  const tweenNodes = useRef<HTMLElement[]>([]);\n\n  const { selectedIndex, onServiceButtonClick } = useServicesButtons(emblaApi);\n\n  const setTweenNodes = useCallback((emblaApi: EmblaCarouselType): void => {\n    tweenNodes.current = emblaApi.slideNodes().map((slideNode) => {\n      return slideNode.querySelector(\".service-preview\") as HTMLElement;\n    });\n  }, []);\n\n  const setTweenFactor = useCallback((emblaApi: EmblaCarouselType) => {\n    tweenFactor.current = TWEEN_FACTOR_BASE * emblaApi.scrollSnapList().length;\n  }, []);\n\n  const tweenScale = useCallback(\n    (emblaApi: EmblaCarouselType, eventName?: EmblaEventType) => {\n      const engine = emblaApi.internalEngine();\n      const scrollProgress = emblaApi.scrollProgress();\n      const slidesInView = emblaApi.slidesInView();\n      const isScrollEvent = eventName === \"scroll\";\n\n      emblaApi.scrollSnapList().forEach((scrollSnap, snapIndex) => {\n        let diffToTarget = scrollSnap - scrollProgress;\n        const slidesInSnap = engine.slideRegistry[snapIndex];\n\n        slidesInSnap.forEach((slideIndex) => {\n          if (isScrollEvent && !slidesInView.includes(slideIndex)) return;\n\n          if (engine.options.loop) {\n            engine.slideLooper.loopPoints.forEach((loopItem) => {\n              const target = loopItem.target();\n\n              if (slideIndex === loopItem.index && target !== 0) {\n                const sign = Math.sign(target);\n\n                if (sign === -1) {\n                  diffToTarget = scrollSnap - (1 + scrollProgress);\n                }\n                if (sign === 1) {\n                  diffToTarget = scrollSnap + (1 - scrollProgress);\n                }\n              }\n            });\n          }\n\n          const tweenValue = 1 - Math.abs(diffToTarget * tweenFactor.current);\n          const scale = numberWithinRange(tweenValue, 0, 1);\n          const tweenNode = tweenNodes.current[slideIndex];\n          tweenNode.style.transform = `scale(${scale})`;\n        });\n      });\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    setTweenNodes(emblaApi);\n    setTweenFactor(emblaApi);\n    tweenScale(emblaApi);\n\n    emblaApi\n      .on(\"reInit\", setTweenNodes)\n      .on(\"reInit\", setTweenFactor)\n      .on(\"reInit\", tweenScale)\n      .on(\"scroll\", tweenScale)\n      .on(\"slideFocus\", tweenScale);\n  }, [emblaApi, tweenScale]);\n\n  return (\n    <>\n      <div className=\"hidden sm:flex flex-col gap-5 p-8 lg:basis-[410px] shrink-0\">\n        {services\n          ? services.map((service, i) => (\n              <ServiceCarouselButton\n                key={`dot-${service.id}`}\n                service={service}\n                onClick={() => onServiceButtonClick(i)}\n                className={`${i === selectedIndex ? \"\" : \"brightness-[0.4]\"}`}\n              />\n            ))\n          : null}\n      </div>\n      <div\n        ref={emblaRef}\n        className=\"hidden sm:block overflow-hidden basis-full\"\n      >\n        <div\n          style={{ backfaceVisibility: \"hidden\" }}\n          className=\"flex flex-col touch-pan-x h-[1000px] sm:h-[900px] md:h-[750px]\"\n        >\n          {services\n            ? services.map((service, i) => (\n                <div\n                  key={service.id}\n                  className=\"grow-0 shrink-0 basis-1/3 min-h-0 select-none flex items-center\"\n                >\n                  <ServicePreview\n                    service={service}\n                    className={`select-none ${\n                      i === selectedIndex ? \"\" : \"brightness-[0.4]\"\n                    }`}\n                  />\n                </div>\n              ))\n            : null}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ServicesCarousel;\n","import React from \"react\";\nimport { HeadFC, HeadProps, PageProps } from \"gatsby\";\nimport { graphql } from \"gatsby\";\nimport { getImage } from \"gatsby-plugin-image\";\n\nimport {\n  IServicesPageContext,\n  IServicesPreviewQueryResult,\n} from \"../types/services.type\";\n\nimport Border from \"../assets/common/border.svg\";\n\nimport Banner from \"../components/common/banner\";\nimport ContentContainer from \"../components/common/contentContainer\";\nimport { HeadSeo } from \"../components/common/metadata\";\nimport ContactFormSection from \"../components/common/contactFormSection\";\nimport ServicesCarousel from \"../components/services/servicesCarousel\";\nimport ServicePreview from \"../components/services/servicePreview\";\n\nconst Services = ({\n  data,\n  pageContext: { markupData, lang },\n}: PageProps<IServicesPreviewQueryResult, IServicesPageContext>) => {\n  const services = data.allMarkdownRemark?.nodes;\n  const bannerImage = getImage(markupData.image);\n\n  return (\n    <>\n      <Banner\n        heightClass=\"lg:h-99\"\n        title={markupData.bannerTitle}\n        image={bannerImage}\n      />\n      <div className=\"bg-main-100\">\n        <ContentContainer\n          maxWidthClass=\"max-w-[1280px]\"\n          className=\"flex flex-col sm:flex-row items-start sm:justify-end py-6 sm:py-10 lg:!px-20 gap-0 sm:gap-5 lg:gap-[48px]\"\n        >\n          {services ? <ServicesCarousel services={services} /> : null}\n          {services\n            ? services.map((service, i) => (\n                <ServicePreview\n                  key={service.id}\n                  service={service}\n                  className={`sm:hidden select-none`}\n                />\n              ))\n            : null}\n        </ContentContainer>\n      </div>\n      <Border className=\"w-full\" />\n      <ContactFormSection lang={lang} />\n    </>\n  );\n};\n\nexport default Services;\n\nexport const Head: HeadFC<\n  IServicesPreviewQueryResult,\n  IServicesPageContext\n> = ({\n  pageContext: { markupData, site, lang },\n  location,\n}: HeadProps<IServicesPreviewQueryResult, IServicesPageContext>) => (\n  <>\n    <HeadSeo\n      title={`${markupData.head} | ${markupData.bannerTitle.toUpperCase()}`}\n      siteUrl={site.siteUrl}\n      path={location.pathname}\n      lang={lang}\n    />\n  </>\n);\n\nexport const query = graphql`\n  query ($lang: String) {\n    allMarkdownRemark(\n      filter: {\n        fields: { sourceName: { eq: \"services\" }, language: { eq: $lang } }\n      }\n    ) {\n      nodes {\n        id\n        html\n        frontmatter {\n          title\n          keywords\n          image {\n            publicURL\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","service","className","html","frontmatter","title","keywords","image","publicURL","imageURL","React","itemScope","itemType","src","alt","itemProp","dangerouslySetInnerHTML","__html","map","hashtag","key","ServiceCarouselButton","attr","Object","assign","type","services","emblaRef","emblaApi","useEmblaCarousel","axis","loop","align","tweenFactor","useRef","tweenNodes","selectedIndex","onServiceButtonClick","useServicesButtons","onButtonClick","setSelectedIndex","useState","useCallback","index","scrollTo","onSelect","selectedScrollSnap","useEffect","on","setTweenNodes","current","slideNodes","slideNode","querySelector","setTweenFactor","scrollSnapList","length","tweenScale","eventName","engine","internalEngine","scrollProgress","slidesInView","isScrollEvent","forEach","scrollSnap","snapIndex","diffToTarget","slideRegistry","slideIndex","includes","options","slideLooper","loopPoints","loopItem","target","sign","Math","tweenValue","abs","scale","number","min","max","numberWithinRange","style","transform","i","id","onClick","ref","backfaceVisibility","ServicePreview","_data$allMarkdownRema","data","pageContext","markupData","lang","allMarkdownRemark","nodes","bannerImage","getImage","Banner","heightClass","bannerTitle","ContentContainer","maxWidthClass","ServicesCarousel","Border","ContactFormSection","Head","_ref2","site","location","HeadSeo","head","toUpperCase","siteUrl","path","pathname"],"sourceRoot":""}